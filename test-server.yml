version: "3.9"
services:
  mysql:
    image: "mysql:8.0.31-debian"
    container_name: mysql
    ports:
      - 3306:3306
      - 33060:33060
    volumes:
            #- /opt/docker-file/mysql/conf/my.cnf:/etc/mysql/conf.d/config-file.cnf:ro
            #- /opt/docker-file/mysql/logs/:/var/lib/mysql/logs/
            #- /opt/docker-file/mysql/data/:/var/lib/mysql/data/
      - /opt/docker-file/mysql/data:/var/lib/mysql
      - /opt/docker-file/mysql/my.cnf:/etc/mysql/conf.d/config-file.cnf:ro
    environment:
      MYSQL_ROOT_PASSWORD: root
      TZ: Asia/Shanghai
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 500M
      restart_policy:
        condition: on-failure
        max_attempts: 3
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "5"
  # teamcity:
  #   # image: jetbrains/teamcity-server:2022.04
  #   image: jetbrains/teamcity-server:2022.10.1
  #   container_name: teamcity
  #   ports:
  #     - "8111:8111"
  #   user: "root:root"
  #   volumes:
  #     - /opt/docker-file/teamcity/data:/data/teamcity_server/datadir
  #     - /opt/docker-file/teamcity/logs:/opt/teamcity/logs
  #   depends_on:
  #     - mysql
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '1'
  #         memory: 1.5G
  #     restart_policy:
  #       condition: on-failure
  #       max_attempts: 3
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "200m"
  #       max-file: "5"
  # teamcity-agent-1:
  #   # image: jetbrains/teamcity-agent:2022.04-linux-sudo
  #   image: jetbrains/teamcity-agent:2022.10.1-linux-sudo
  #   container_name: teamcity-agent-1
  #   user: "root:root"
  #   volumes:
  #     - /opt/docker-file/teamcity-agent/config:/data/teamcity_agent/conf
  #   environment:
  #     - DOCKER_IN_DOCKER=start
  #     - SERVER_URL=teamcity:8111
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '2'
  #         memory: 1.0G
  #     restart_policy:
  #       condition: on-failure
  #       max_attempts: 3
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "200m"
  #       max-file: "5"
  redis:
    image: "redis:7.0.7-alpine"
    container_name: redis
    ports:
      - 6379:6379
    volumes:
      - /opt/docker-file/redis/data:/data
      - /opt/docker-file/redis/log:/data/log
      - /opt/docker-file/redis/conf/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: on-failure
        max_attempts: 3
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "5"
  rabbitmq:
    image: "rabbitmq:3.9.27-management-alpine"
    ports:
      - 15672:15672
      - 5672:5672
    container_name: rabbitmq
    hostname: my-rabbit
    volumes:
        - /opt/docker-file/rabbitmq/data:/var/lib/rabbitmq
        - /opt/docker-file/rabbitmq/conf:/etc/rabbitmq/conf.d:ro
    deploy:
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: on-failure
        max_attempts: 3
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "5"
  mongo:
    image: "mongo:latest"
    container_name: mongo
    ports:
      - 27017:27017
    volumes:
      - /opt/docker-file/mongo/data:/data
      - /opt/docker-file/mongo/log:/var/log/mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: baozi199929
      MONGO_INITDB_DATABASE: admin
    deploy:
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: on-failure
        max_attempts: 3
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "5"
  nacos:
    image: nacos/nacos-server:v2.2.0
    container_name: nacos
    environment:
      - PREFER_HOST_MODE=hostname
      - MODE=standalone
      - MYSQL_DATABASE_NUM=1
      - SPRING_DATASOURCE_PLATFORM=mysql
      - MYSQL_SERVICE_HOST=mysql
      - MYSQL_SERVICE_DB_NAME=nacos
      - MYSQL_SERVICE_PORT=3306
      - MYSQL_SERVICE_USER=nacos
      - MYSQL_SERVICE_PASSWORD=nacos
      - MYSQL_SERVICE_DB_PARAM=characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
      - JVM_XMS=400m
      - JVM_XMX=400m
      - JVM_XMN=200m
      - JVM_MS=50m
      - JVM_MMS=80m
    volumes:
      - /opt/docker-file/nacos/logs:/home/nacos/logs
      # - /opt/docker-file/nacos/conf/custom.properties:/home/nacos/init.d/custom.properties
      - /opt/docker-file/nacos/conf:/home/nacos/conf
    depends_on:
      - mysql
    ports:
      - "8848:8848"
      - "9848:9848"
      - "9555:9555"
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 650M
      restart_policy:
        condition: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "5"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:8848/nacos"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 5m
  es:
    image: elasticsearch:8.0.0
    container_name: es
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - "discovery.type=single-node"
      # - "ES_JAVA_OPTS=-Xms300m -Xmx300m"
      - "bootstrap.memory_lock=true"
      - "xpack.security.enabled=false"
      - "-Des.enforce.bootstrap.checks=true"
    volumes:
      - /opt/docker-file/es/data:/usr/share/elasticsearch/data
      - /opt/docker-file/es/config:/usr/share/elasticsearch/config
      - /opt/docker-file/es/logs:/usr/share/elasticsearch/logs
    networks:
      - elastic
    restart: on-failure
    deploy:
      resources:
        limits:
          cpus: '0.20'
          memory: 600M
      restart_policy:
        condition: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "5"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:9200"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 5m
  zookeeper:
    image: zookeeper:3.8.0-temurin
    container_name: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - "/opt/docker-file/zookeeper/data:/data"
      - "/opt/docker-file/zookeeper/datalog:/datalog"
      - "/opt/docker-file/zookeeper/logs:/logs"
      - "/opt/docker-file/zookeeper/config:/conf"
    environment:
      - JVMFLAGS=-Xmx150m
    networks:
      - kafka
    deploy:
      resources:
        limits:
          cpus: '0.10'
          memory: 200M
      restart_policy:
        condition: on-failure
  kafka:
    # image: bitnami/kafka:latest
    image: bitnami/kafka:3.3.1-debian-11-r35
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - "/opt/docker-file/kafka:/bitnami/kafka"
    environment:
      - KAFKA_HEAP_OPT=-Xmx500m -Xms500m
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=true
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://0.0.0.0:9092,EXTERNAL://0.0.0.0:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://192.168.0.210:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_CFG_LOG_RETENTION_HOURS=24
      - KAFKA_CFG_LOG_RETENTION_CHECK_INTERVAL_MS=60000
    depends_on:
      - zookeeper
    networks:
      - kafka
    deploy:
      resources:
        limits:
          cpus: '0.10'
          memory: 600M
      restart_policy:
        condition: on-failure
  # nexus3:
  #   image: sonatype/nexus3:latest
  #   container_name: nexus3
  #   environment:
  #     INSTALL4J_ADD_VM_PARAMS: "-Xms2703m -Xmx2703m -XX:MaxDirectMemorySize=2703m"
  #     NEXUS_CONTEXT: /nexus
  #   privileged: true
  #   ports: 
  #     - 8081:8081
  #   volumes: 
  #     - /opt/docker-file/nexus3:/nexus-data:rw
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.50'
  #         memory: 2800M
  #     restart_policy:
  #       condition: on-failure
networks:
  elastic:
    name: elastic_bridge
    driver: bridge
  kafka:
    name: kafka_bridge
    driver: bridge
# volumes:
#   elastic-config:
#     name: elastic-config
#   elastic-data:
#     name: elastic-data
#   kibana-bin:
#     name: kibana-bin
#   /opt/docker-file/zookeeper/data:
#     name: /opt/docker-file/zookeeper/data
#   /opt/docker-file/zookeeper/datalog:
#     name: /opt/docker-file/zookeeper/datalog
#   /opt/docker-file/zookeeper/logs:
#     name: /opt/docker-file/zookeeper/logs
#   /opt/docker-file/zookeeper/config:
#     name: /opt/docker-file/zookeeper/config
#   kafka-data:
#     name: kafka-data
#   teamcity-data:
#     name: teamcity-data
#   teamcity-logs:
#     name: teamcity-logs
#   teamcity-agent-config:
#     name: teamcity-agent-config
